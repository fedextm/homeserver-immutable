name: Push Image to GHCR

on:
  push:
    branches:
      - main

permissions:
  packages: write
  contents: write
  attestations: write
  id-token: write

jobs:
  build:
    name: Push Image and Create Tag
    runs-on: [self-hosted, Linux] # Uses your private runner

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to GHCR
        env:
          REGISTRY: ghcr.io
          USERNAME: ${{ github.actor }}
          PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          echo "${PASSWORD}" | podman login $REGISTRY -u $USERNAME --password-stdin

      - name: Set up Git user
        run: |
          git config --global user.name '${{ env.GITHUB_USER }}'
          git config --global user.email '${{ env.GITHUB_USER_EMAIL }}'
          git remote -v

      - name: Detect bump type (major/minor/patch)
        id: bump
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit message: $COMMIT_MSG"

          if [[ "$COMMIT_MSG" == *"[bump:major]"* ]]; then
            echo "BUMP=major" >> $GITHUB_ENV
          elif [[ "$COMMIT_MSG" == *"[bump:minor]"* ]]; then
            echo "BUMP=minor" >> $GITHUB_ENV
          else
            echo "BUMP=patch" >> $GITHUB_ENV
          fi

      - name: Determine next version
        id: version
        run: |
          latest=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | tail -n1)
          echo "Latest tag: $latest"
          if [[ "$latest" == "" ]]; then
            next="v1.0.0"
          else
            major=$(echo $latest | cut -d. -f1 | tr -d 'v')
            minor=$(echo $latest | cut -d. -f2)
            patch=$(echo $latest | cut -d. -f3)

            case "${BUMP}" in
              major)
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              minor)
                minor=$((minor + 1))
                patch=0
                ;;
              patch)
                patch=$((patch + 1))
                ;;
            esac

            next="v${major}.${minor}.${patch}"
          fi

          echo "NEXT_TAG=$next" >> $GITHUB_ENV
          echo "tag=$next" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git tag ${{ env.NEXT_TAG }}
          git push origin ${{ env.NEXT_TAG }}

      - name: Generate changelog
        id: changelog
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | tail -n2 | head -n1)
          if [[ "$latest_tag" == "" ]]; then
            git log --pretty=format:"* %s" > CHANGELOG.md
          else
            git log ${latest_tag}..HEAD --pretty=format:"* %s" > CHANGELOG.md
          fi

      - name: Push image to GHCR
        run: |
          podman tag local/fedextm/homeserver:default ghcr.io/fedextm/homeserver:v${{ env.NEXT_TAG }}
          podman push ghcr.io/fedextm/homeserver:${{ env.NEXT_TAG }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEXT_TAG }}
          name: Release ${{ env.NEXT_TAG }}
          body_path: CHANGELOG.md
          files: out/my-image-${{ env.NEXT_TAG }}.iso
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
